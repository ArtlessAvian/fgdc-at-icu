[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeTexture" id=93]
source = 5

[sub_resource type="VisualShaderNodeScalarConstant" id=94]
constant = 100.0

[sub_resource type="VisualShaderNodeIf" id=95]
default_input_values = [ 0, 0.0, 1, 0.56, 2, 1e-05, 3, Vector3( 1, 1, 1 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeColorConstant" id=96]

[sub_resource type="VisualShaderNodeTexture" id=79]
source = 5

[sub_resource type="VisualShaderNodeInput" id=80]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=81]
input_name = "texture"

[sub_resource type="VisualShaderNodeScalarConstant" id=88]
constant = 1.0

[sub_resource type="VisualShaderNodeVectorDistance" id=90]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=91]
default_input_values = [ 0, 0.0, 1, 0.007, 2, 0.0005, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeTexture" id=92]
source = 5

[sub_resource type="VisualShader" id=86]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Input:4

// Texture:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out3p0.xy);
		n_out9p0 = TEXTURE_tex_read.rgb;
		n_out9p1 = TEXTURE_tex_read.a;
	}

// Scalar:11
	float n_out11p0 = 100.000000;

// Texture:10
	vec3 n_out10p0;
	float n_out10p1;
	{
		vec4 TEXTURE_tex_read = textureLod(TEXTURE, n_out3p0.xy, n_out11p0);
		n_out10p0 = TEXTURE_tex_read.rgb;
		n_out10p1 = TEXTURE_tex_read.a;
	}

// Color:13
	vec3 n_out13p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out13p1 = 1.000000;

// Scalar:5
	float n_out5p0 = 1.000000;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 TEXTURE_tex_read = textureLod(TEXTURE, n_out3p0.xy, n_out5p0);
		n_out2p0 = TEXTURE_tex_read.rgb;
		n_out2p1 = TEXTURE_tex_read.a;
	}

// Distance:7
	float n_out7p0 = distance(n_out13p0, n_out2p0);

// If:8
	float n_in8p1 = 0.00700;
	float n_in8p2 = 0.00050;
	vec3 n_in8p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in8p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in8p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out8p0;
	if(abs(n_out7p0 - n_in8p1) < n_in8p2)
	{
		n_out8p0 = n_in8p3;
	}
	else if(n_out7p0 < n_in8p1)
	{
		n_out8p0 = n_in8p5;
	}
	else
	{
		n_out8p0 = n_in8p4;
	}

// If:12
	float n_in12p1 = 0.56000;
	float n_in12p2 = 0.00001;
	vec3 n_out12p0;
	if(abs(dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333)) - n_in12p1) < n_in12p2)
	{
		n_out12p0 = n_out8p0;
	}
	else if(dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333)) < n_in12p1)
	{
		n_out12p0 = vec3(n_out9p1);
	}
	else
	{
		n_out12p0 = n_out8p0;
	}

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = dot(n_out12p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -399.081, -338.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 760, 0 )
nodes/fragment/2/node = SubResource( 79 )
nodes/fragment/2/position = Vector2( -160, -80 )
nodes/fragment/3/node = SubResource( 80 )
nodes/fragment/3/position = Vector2( -460, 120 )
nodes/fragment/4/node = SubResource( 81 )
nodes/fragment/4/position = Vector2( -460, 220 )
nodes/fragment/5/node = SubResource( 88 )
nodes/fragment/5/position = Vector2( -480, -60 )
nodes/fragment/7/node = SubResource( 90 )
nodes/fragment/7/position = Vector2( 60, -240 )
nodes/fragment/8/node = SubResource( 91 )
nodes/fragment/8/position = Vector2( 260, -180 )
nodes/fragment/9/node = SubResource( 92 )
nodes/fragment/9/position = Vector2( -160, 160 )
nodes/fragment/10/node = SubResource( 93 )
nodes/fragment/10/position = Vector2( -160, 360 )
nodes/fragment/11/node = SubResource( 94 )
nodes/fragment/11/position = Vector2( -440, 400 )
nodes/fragment/12/node = SubResource( 95 )
nodes/fragment/12/position = Vector2( 520, 120 )
nodes/fragment/13/node = SubResource( 96 )
nodes/fragment/13/position = Vector2( -160, -240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 2, 5, 0, 2, 1, 3, 0, 9, 0, 4, 0, 9, 2, 2, 0, 7, 1, 7, 0, 8, 0, 11, 0, 10, 1, 3, 0, 10, 0, 4, 0, 10, 2, 10, 0, 12, 0, 9, 0, 0, 0, 12, 0, 0, 1, 8, 0, 12, 4, 8, 0, 12, 3, 13, 0, 7, 0, 9, 1, 12, 5 )

[resource]
shader = SubResource( 86 )
